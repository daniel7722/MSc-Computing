,learning_rate,batch_size,neurons_per_layers,activation_functions,score
0,0.005,128,[32],['tanh'],"tensor(0.1977, device='cuda:0')"
1,0.005,64,[64],['tanh'],"tensor(0.2345, device='cuda:0')"
2,0.005,64,[32 32],['sigmoid' 'sigmoid'],"tensor(0.1822, device='cuda:0')"
3,0.01,128,[32],['relu'],"tensor(0.2189, device='cuda:0')"
4,0.005,64,[64 32],['sigmoid' 'tanh'],"tensor(0.1973, device='cuda:0')"
5,0.005,64,[16 32],['tanh' 'sigmoid'],"tensor(0.1998, device='cuda:0')"
6,0.001,64,[64 32],['tanh' 'sigmoid'],"tensor(0.2123, device='cuda:0')"
7,0.01,128,[32 64],['sigmoid' 'relu'],"tensor(0.2272, device='cuda:0')"
8,0.005,32,[64],['relu'],"tensor(0.2294, device='cuda:0')"
9,0.01,32,[64 64 32],['relu' 'tanh' 'sigmoid'],"tensor(0.2119, device='cuda:0')"
10,0.005,64,[16 16],['relu' 'sigmoid'],"tensor(0.2150, device='cuda:0')"
11,0.001,64,[64 16 64],['relu' 'sigmoid' 'relu'],"tensor(0.2206, device='cuda:0')"
12,0.01,64,[64],['sigmoid'],"tensor(0.2662, device='cuda:0')"
13,0.005,128,[16 64],['relu' 'tanh'],"tensor(0.2063, device='cuda:0')"
14,0.001,64,[64],['relu'],"tensor(0.2138, device='cuda:0')"
15,0.005,128,[64],['sigmoid'],"tensor(0.2372, device='cuda:0')"
16,0.01,64,[16 16],['sigmoid' 'relu'],"tensor(0.1982, device='cuda:0')"
17,0.01,32,[16],['tanh'],"tensor(0.2130, device='cuda:0')"
18,0.01,64,[32 16],['tanh' 'sigmoid'],"tensor(0.1885, device='cuda:0')"
19,0.01,32,[32 64 32],['relu' 'tanh' 'tanh'],"tensor(0.2292, device='cuda:0')"
20,0.01,64,[64 32 16],['relu' 'tanh' 'sigmoid'],"tensor(0.2412, device='cuda:0')"
21,0.001,128,[32],['relu'],"tensor(0.2472, device='cuda:0')"
22,0.01,32,[64 16 16],['relu' 'relu' 'sigmoid'],"tensor(0.2016, device='cuda:0')"
23,0.005,32,[64 16 16],['sigmoid' 'tanh' 'tanh'],"tensor(0.2080, device='cuda:0')"
24,0.01,128,[16 32],['tanh' 'sigmoid'],"tensor(0.2030, device='cuda:0')"
